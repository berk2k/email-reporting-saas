// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())  // Set default value for new rows
  reportSettings ReportSettings[]  // A user can have multiple report settings
  sales         Sales[]  // <<< Burası eklendi
}

model Sales {
  id            Int      @id @default(autoincrement())
  item          String
  quantity      Int
  total         Float
  paymentMethod String
  timestamp     DateTime @default(now())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])

  @@map("Sales") // <-- Burayı ekledim!
}


model ReportSettings {
  id            Int      @id @default(autoincrement())
  userId        Int      
  reportType    String   // e.g., "sales", "inventory"
  frequency     String   // e.g., "daily", "weekly", "monthly"
  lastGenerated DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id])
  reports       Report[] // Yeni ilişki ekliyoruz
  
  @@unique([userId, reportType, frequency])
}

model Report {
  id            Int      @id @default(autoincrement())
  reportSettingsId Int   // Hangi ayara göre oluşturulduğu
  createdAt     DateTime @default(now())
  content       String   @db.Text // JSON formatında rapor içeriği
  sent          Boolean  @default(false) // E-posta gönderildi mi?
  
  reportSettings ReportSettings @relation(fields: [reportSettingsId], references: [id])
}





